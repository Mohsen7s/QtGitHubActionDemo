name: release
on:
  push:
    tags:
      - v*
env:
  APP_NAME: qtgithubactiondemo

jobs:
  create-release:
    name: Create release
    runs-on: ubuntu-20.04
    steps:
      # Pull code
      - name: Pull code
        uses: actions/checkout@v1
        with:
          fetch-depth: 1
      # Create release
      - name: Create Release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.DAILYBUILDING }} # This token is provided by Actions, you do not need to create your own token
        with:
          tag_name: ${{ github.ref }}
          release_name: Release ${{ github.ref }}
          body: The version is ready.
          draft: false
          prerelease: false
    
  build-for-windows:
    needs: [create-release]
    name: Build for Windows
    runs-on: windows-2019
    strategy:
      matrix:
        qt_ver: [5.15.2]
        qt_target: [desktop]
        qt_arch: [win32_msvc2019, win64_msvc2019_64]
        include:
          - qt_arch: win32_msvc2019
            msvc_arch: x86
            qt_arch_install: msvc2019
          - qt_arch: win64_msvc2019_64
            msvc_arch: x64
            qt_arch_install: msvc2019_64
    steps:
      # Cache Qt
      - name: cacheQt
        id: WindowsCacheQt
        uses: actions/cache@v1
        with:
          path: ../Qt/${{matrix.qt_ver}}/${{matrix.qt_arch_install}}
          key: ${{ runner.os }}-Qt/${{matrix.qt_ver}}/${{matrix.qt_arch}}
      # Install Qt
      - name: Install Qt
        uses: jurplel/install-qt-action@v2.10.0
        with:
          version: ${{ matrix.qt_ver }}
          target: ${{ matrix.qt_target }}
          arch: ${{ matrix.qt_arch }}
          cached: ${{steps.WindowsCacheQt.outputs.cache-hit }}
      # Pull code and checkout.
      - name: Pull code
        uses: actions/checkout@v1
        with:
          fetch-depth: 1
      # Build the project
      - name: build-msvc
        shell: cmd
        env:
          vc_arch: ${{ matrix.msvc_arch }}
        run: |
          call "C:\Program Files (x86)\Microsoft Visual Studio\2019\Enterprise\VC\Auxiliary\Build\vcvarsall.bat" %vc_arch%
          qmake
          nmake
          dir

      - name: Gets latest created release info
        id: latest_release_info
        uses: jossef/action-latest-release-info@v1.1.0
        env:
          GITHUB_TOKEN: ${{ secrets.DAILYBUILDING }}
          
      #- name: Rename directory
      #  run: |
      #    mkdir ${{ env.APP_NAME }}-${{ steps.latest_release_info.outputs.tag_name }}-for-windows-${{ matrix.msvc_arch }}
      #    xcopy /e release ${{ env.APP_NAME }}-${{ steps.latest_release_info.outputs.tag_name }}-for-windows-${{ matrix.msvc_arch }}
          
      - name: To zip
        run: |
          7z.exe a ${{ env.APP_NAME }}-${{ steps.latest_release_info.outputs.tag_name }}-for-windows-${{ matrix.msvc_arch }}.zip release/*
          dir
        
      - name: Upload Release Asset
        id: upload-release-asset 
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.DAILYBUILDING }}
        with:
          upload_url:  ${{ steps.latest_release_info.outputs.upload_url }}
          asset_path: ${{ env.APP_NAME }}-${{ steps.latest_release_info.outputs.tag_name }}-for-windows-${{ matrix.msvc_arch }}.zip
          asset_name: ${{ env.APP_NAME }}-${{ steps.latest_release_info.outputs.tag_name }}-for-windows-${{ matrix.msvc_arch }}.zip
          asset_content_type: application/zip

  build-for-android:
    needs: [create-release]
    name: Build for Android
    runs-on: ubuntu-20.04
    strategy:
      matrix:
        qt_arch: [android_x86, android_armv7, android_arm64_v8a]
        qt_ver: [5.12.10]
        qt_target: [android]
    steps:
      - name: Install Qt
        uses: jurplel/install-qt-action@v2.10.0
        with:
          # Version of Qt to install
          version: ${{ matrix.qt_ver }}
          # Target platform for build
          target: ${{ matrix.qt_target }}
          # Architecture for Windows/Android
          arch: ${{ matrix.qt_arch }}
      - uses: actions/checkout@v1
        with:
          fetch-depth: 1
      - name: build android
        # https://doc.qt.io/qt-5/deployment-android.html
        run: |
          export JAVA_HOME=$JAVA_HOME_8_X64
          export ANDROID_SDK_ROOT=$ANDROID_HOME
          export ANDROID_NDK_ROOT=$ANDROID_HOME/ndk-bundle
          echo $ANDROID_HOME $ANDROID_HOME
          qmake
          make install INSTALL_ROOT="./release"
          echo $JAVA_HOME_8_X64
          echo $JAVA_HOME_11_X64
          #export PATH=$PATH:$JAVA_HOME_8_X64
          echo $PATH
          androiddeployqt --verbose --output release/ --input $(ls *.json) --android-platform android-29 --jdk $JAVA_HOME --gradle
      
      - name: Gets latest created release info
        id: latest_release_info
        uses: jossef/action-latest-release-info@v1.1.0
        env:
          GITHUB_TOKEN: ${{ secrets.DAILYBUILDING }}
      
      - name: Upload Release Asset
        id: upload-release-asset 
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.DAILYBUILDING }}
        with:
          upload_url:  ${{ steps.latest_release_info.outputs.upload_url }}
          asset_path: release/build/outputs/apk/debug/release-debug.apk
          asset_name: ${{ env.APP_NAME }}-${{ steps.latest_release_info.outputs.tag_name }}-for-${{ matrix.qt_arch }}.apk
          asset_content_type: application/zip
